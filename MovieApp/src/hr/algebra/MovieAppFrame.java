/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.EntityRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.User;
import hr.algebra.model.UserLoggable;
import hr.algebra.model.UserRole;
import hr.algebra.utils.MessageUtils;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author kezel
 */
public class MovieAppFrame extends javax.swing.JFrame implements UserLoggable {

    private Optional<User> USER = Optional.empty();

    /* Tab names */
    private static final String MANAGE_DATA = "Manage data";
    private static final String MOVIE = "Movie";
    private static final String DIRECTOR = "Director";
    private static final String ACTOR = "Actor";

    /**
     * Creates new form MovieAppFrame
     */
    public MovieAppFrame() {
        initComponents();
        new EnterAppDialog(this, false).setVisible(true);
        configurePanelsAndMenuItems();
        handleLookAndFeel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuApp = new javax.swing.JMenu();
        miExit = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuLookAndFeel = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Movie app");
        setMinimumSize(new java.awt.Dimension(1800, 1000));
        setPreferredSize(new java.awt.Dimension(1800, 1000));
        setSize(new java.awt.Dimension(1800, 1000));

        menuApp.setText("App");

        miExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        menuApp.add(miExit);

        jMenuBar1.add(menuApp);

        menuView.setText("View");

        menuLookAndFeel.setText("Look and feel");
        menuView.add(menuLookAndFeel);

        jMenuBar1.add(menuView);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 1339, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        if (JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit?",
                "Exit appliacation",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.ERROR_MESSAGE) == JOptionPane.YES_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_miExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieAppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovieAppFrame().setVisible(true);
            }
        });
    }

    @Override
    public boolean logUser(User user) {

        try {
            EntityRepository<User> userRepository = RepositoryFactory.getUserRepository();
            List<User> users = userRepository.selectAll();
            Stream<User> matchUsers = users.stream().filter(u -> u.getUsername().equals(user.getUsername()) && u.getPassword().equals(user.getPassword()));
            Optional<User> matchUser = matchUsers.findFirst();

            if (matchUser.isPresent()) {
                USER = Optional.of(matchUser.get());
                return true;
            } else {
                return false;
            }

        } catch (Exception ex) {
            Logger.getLogger(MovieAppFrame.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Could not log in.");
            return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu menuApp;
    private javax.swing.JMenu menuLookAndFeel;
    private javax.swing.JMenu menuView;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

    private void configurePanelsAndMenuItems() {

        JMenuItem miMoviesPanel = createMenuItem(
                null,
                "Movies",
                KeyStroke.getKeyStroke(KeyEvent.VK_M, InputEvent.CTRL_MASK)
        );

        JMenuItem miDirectorsPanel = createMenuItem(
                null,
                "Directors",
                KeyStroke.getKeyStroke(KeyEvent.VK_D, InputEvent.CTRL_MASK)
        );

        JMenuItem miActorsPanel = createMenuItem(
                null,
                "Actors",
                KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_MASK)
        );

        if (USER.isPresent()) {
            if (USER.get().getUserRole() == UserRole.ADMINISTRATOR) {

                JMenuItem miManageMoviesPanel = createMenuItem(
                        null,
                        "Manage movies",
                        KeyStroke.getKeyStroke(KeyEvent.VK_N, InputEvent.CTRL_MASK)
                );

                addMenuItem(menuApp, miManageMoviesPanel, 0);
                addMenuItem(menuApp, miMoviesPanel, 1);
                addMenuItem(menuApp, miDirectorsPanel, 2);
                addMenuItem(menuApp, miActorsPanel, 3);

                tpContent.add(MANAGE_DATA, new UploadAndDeleteMoviesPanel());

            } else {
                addMenuItem(menuApp, miMoviesPanel, 0);
                addMenuItem(menuApp, miDirectorsPanel, 1);
                addMenuItem(menuApp, miActorsPanel, 2);
            }

            tpContent.add(MOVIE, new MoviePanel());
            tpContent.add(DIRECTOR, new DirectorPanel());
            tpContent.add(ACTOR, new ActorPanel());
        } else {
            System.exit(0);
        }
    }

    private void handleLookAndFeel() {

        ButtonGroup bg = new ButtonGroup();

        Arrays.asList(UIManager.getInstalledLookAndFeels()).forEach(lf -> {
            JRadioButtonMenuItem mi = new JRadioButtonMenuItem(lf.getName());
            bg.add(mi);
            menuLookAndFeel.add(mi);
            if ("Nimbus".equals(lf.getName())) {
                mi.setSelected(true);
            }

            mi.addActionListener(e -> {
                try {
                    UIManager.setLookAndFeel(lf.getClassName());
                    SwingUtilities.updateComponentTreeUI(MovieAppFrame.this);
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(MovieAppFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        });
    }

    private JMenuItem createMenuItem(Action action, String text, KeyStroke accelerator) {
        JMenuItem mi = new JMenuItem();
        mi.setAction(action);
        mi.setText(text);
        mi.setAccelerator(accelerator);
        return mi;
    }

    private void addMenuItem(JMenu menu, JMenuItem menuItem, int tabIndex) {
        menuItem.addActionListener((ActionEvent e) -> {
            tpContent.setSelectedIndex(tabIndex);
        });

        menu.add(menuItem);
    }
}
