/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.EntityRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Actor;
import hr.algebra.model.Movie;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTableModel;
import hr.algebra.utils.MessageUtils;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.JTextComponent;

/**
 *
 * @author kezel
 */
public class ActorPanel extends javax.swing.JPanel {

    private List<JComponent> validationFields;
    private List<JLabel> errorLabels;

    private Person selectedActor;

    private EntityRepository actorRepository;
    private PersonTableModel actorsTableModel;

    private final Set<Movie> movies = new TreeSet<>(Movie.TITLE_COMPARATOR);
    private final DefaultListModel<Movie> moviesModel = new DefaultListModel<>();

    /**
     * Creates new form ActorPanel
     */
    public ActorPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblActors = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        tfFirstName = new javax.swing.JTextField();
        tfLastName = new javax.swing.JTextField();
        lblFirstNameError = new javax.swing.JLabel();
        lblLastNameError = new javax.swing.JLabel();
        lblMovies = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();

        setMinimumSize(new java.awt.Dimension(1600, 800));
        setPreferredSize(new java.awt.Dimension(1600, 800));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblActors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblActorsMouseClicked(evt);
            }
        });
        tblActors.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblActorsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblActors);

        btnAdd.setBackground(new java.awt.Color(102, 255, 102));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(51, 153, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblFirstName.setText("First name:");

        lblLastName.setText("Last name:");

        lblFirstNameError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblFirstNameError.setForeground(java.awt.Color.red);
        lblFirstNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblLastNameError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblLastNameError.setForeground(java.awt.Color.red);
        lblLastNameError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblMovies.setText("Movies:");

        jScrollPane2.setViewportView(lsMovies);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1588, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfLastName))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfFirstName)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLastNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblFirstNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMovies))
                        .addGap(561, 561, 561)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnAdd)
                                    .addComponent(btnUpdate)
                                    .addComponent(btnDelete)
                                    .addComponent(lblMovies))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFirstNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblLastNameError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblActorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblActorsMouseClicked
        showActor();
    }//GEN-LAST:event_tblActorsMouseClicked

    private void tblActorsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblActorsKeyReleased
        showActor();
    }//GEN-LAST:event_tblActorsKeyReleased

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                Person actor = new Actor(
                        tfFirstName.getText().trim(),
                        tfLastName.getText().trim()
                );
                actorRepository.create(actor);
                actorsTableModel.setPersons(actorRepository.selectAll());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(ActorPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to create actor.");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedActor == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose an actor to update.");
            return;
        }
        if (formValid()) {
            try {
                selectedActor.setFirstName(tfFirstName.getText().trim());
                selectedActor.setLastName(tfLastName.getText().trim());

                actorRepository.update(selectedActor.getId(), selectedActor);
                actorsTableModel.setPersons(actorRepository.selectAll());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(ActorPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update actor.");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedActor == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose an actor to delete.");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete actor",
                "Do you really want to delete actor?") == JOptionPane.YES_OPTION) {
            try {
                actorRepository.delete(selectedActor.getId());
                actorsTableModel.setPersons(actorRepository.selectAll());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(ActorPanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete actor.");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblFirstNameError;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblLastNameError;
    private javax.swing.JLabel lblMovies;
    private javax.swing.JList<Movie> lsMovies;
    private javax.swing.JTable tblActors;
    private javax.swing.JTextField tfFirstName;
    private javax.swing.JTextField tfLastName;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(ActorPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form.");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfFirstName,
                tfLastName);

        errorLabels = Arrays.asList(
                lblFirstNameError,
                lblLastNameError);
    }

    private void initRepository() throws Exception {
        actorRepository = RepositoryFactory.getActorRepository();
    }

    private void initTable() throws Exception {
        tblActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblActors.setAutoCreateRowSorter(true);
        tblActors.setRowHeight(25);
        actorsTableModel = new PersonTableModel(actorRepository.selectAll());
        if (actorsTableModel.getRowCount() == 0) {
            MessageUtils.showInformationMessage("No data", "No actors to show.");
        }
        tblActors.setModel(actorsTableModel);
    }

    private void showActor() {
        clearForm();
        int selectedRow = tblActors.getSelectedRow();
        int rowIndex = tblActors.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) actorsTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Person> optActor = actorRepository.select(selectedMovieId);
            if (optActor.isPresent()) {
                selectedActor = optActor.get();
                fillForm(selectedActor);
            }
        } catch (Exception ex) {
            Logger.getLogger(ActorPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show actor.");
        }
    }

    private void clearForm() {
        try {
            validationFields.forEach(vf -> ((JTextComponent) vf).setText(""));
            errorLabels.forEach(el -> el.setText(""));
            selectedActor = null;

            movies.clear();
            loadMovieList(moviesModel, movies, lsMovies);
        } catch (Exception ex) {
            Logger.getLogger(ActorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillForm(Person actor) {
        try {
            tfFirstName.setText(actor.getFirstName());
            tfLastName.setText(actor.getLastName());

            List<Integer> movieIDs = RepositoryFactory.getMovieActorRepository().selectByEntity2(actor.getId());
            movies.clear();
            movieIDs.forEach(id -> {
                try {
                    Optional<Movie> m = RepositoryFactory.getMovieRepository().select(id);
                    if (m.isPresent()) {
                        movies.add(m.get());
                    }
                } catch (Exception ex) {
                    Logger.getLogger(ActorPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
            loadMovieList(moviesModel, movies, lsMovies);
        } catch (Exception ex) {
            Logger.getLogger(ActorPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {

            JTextComponent vf = (JTextComponent) validationFields.get(i);

            ok &= !vf.getText().trim().isEmpty();
            errorLabels.get(i).setText(vf.getText().trim().isEmpty() ? "X" : "");
        }

        return ok;
    }

    private void loadMovieList(DefaultListModel<Movie> moviesModel, Collection<Movie> movies, JList<Movie> lsMovies) {
        moviesModel.clear();
        movies.forEach(moviesModel::addElement);
        lsMovies.removeAll();
        lsMovies.setModel(moviesModel);
    }
}
