/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.EntityRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.MovieTableModel;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;

/**
 *
 * @author kezel
 */
public class MoviePanel extends javax.swing.JPanel {

    private List<JComponent> validationFields;
    private List<JLabel> errorLabels;

    private static final String DIR = "assets";

    private EntityRepository movieRepository;
    private MovieTableModel moviesTableModel;

    private Movie selectedMovie;

    private final Set<Person> directors = new TreeSet<>(Person.NAME_COMPARATOR);
    private final Set<Person> allDirectors = new TreeSet<>(Person.NAME_COMPARATOR);
    private final Set<Person> actors = new TreeSet<>(Person.NAME_COMPARATOR);
    private final Set<Person> allActors = new TreeSet<>(Person.NAME_COMPARATOR);

    private final DefaultListModel<Person> directorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> actorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allDirectorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allActorsModel = new DefaultListModel<>();

    /**
     * Creates new form MoviePanel
     */
    public MoviePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMovies = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        tfPoster = new javax.swing.JTextField();
        lblPosterError = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lblTitleError = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        lblOriginalTitleError = new javax.swing.JLabel();
        lblPubDateError = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfStartDate = new javax.swing.JTextField();
        lblStartDateError = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lblDurationError = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        tfLink = new javax.swing.JTextField();
        lblLinkError = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tfGuid = new javax.swing.JTextField();
        lblGuidError = new javax.swing.JLabel();
        lblTrailerError = new javax.swing.JLabel();
        tfTrailer = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        lblActorsError = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        lblDirectorsError = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsAllDirectors = new javax.swing.JList<>();
        jLabel28 = new javax.swing.JLabel();
        lblPoster = new javax.swing.JLabel();
        btnChoosePicture = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        lblGenresError = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        btnUpdate = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tfPubDate = new javax.swing.JTextField();

        setMinimumSize(new java.awt.Dimension(1600, 800));
        setPreferredSize(new java.awt.Dimension(1600, 800));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMoviesMouseClicked(evt);
            }
        });
        tblMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblMovies);

        jLabel1.setText("Poster:");

        tfPoster.setEnabled(false);

        lblPosterError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblPosterError.setForeground(java.awt.Color.red);
        lblPosterError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel3.setText("Title:");

        lblTitleError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblTitleError.setForeground(java.awt.Color.red);
        lblTitleError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel5.setText("Original title:");

        lblOriginalTitleError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblOriginalTitleError.setForeground(java.awt.Color.red);
        lblOriginalTitleError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblPubDateError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblPubDateError.setForeground(java.awt.Color.red);
        lblPubDateError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel9.setText("Start date (03.12.2011):");

        tfStartDate.setName("StartDate"); // NOI18N

        lblStartDateError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblStartDateError.setForeground(java.awt.Color.red);
        lblStartDateError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel11.setText("Duration:");

        tfDuration.setName("Duration"); // NOI18N

        lblDurationError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblDurationError.setForeground(java.awt.Color.red);
        lblDurationError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel13.setText("Link:");

        lblLinkError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblLinkError.setForeground(java.awt.Color.red);
        lblLinkError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel15.setText("Guid:");

        lblGuidError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblGuidError.setForeground(java.awt.Color.red);
        lblGuidError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblTrailerError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblTrailerError.setForeground(java.awt.Color.red);
        lblTrailerError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel18.setText("Trailer:");

        lblDescriptionError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblDescriptionError.setForeground(java.awt.Color.red);
        lblDescriptionError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel22.setText("Description:");

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        taDescription.setWrapStyleWord(true);
        jScrollPane2.setViewportView(taDescription);

        lsActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lsActorsMouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(lsActors);

        lblActorsError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblActorsError.setForeground(java.awt.Color.red);
        lblActorsError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel25.setText("All actors:");

        lsAllActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lsAllActorsMouseEntered(evt);
            }
        });
        jScrollPane4.setViewportView(lsAllActors);

        lsDirectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lsDirectorsMouseEntered(evt);
            }
        });
        jScrollPane5.setViewportView(lsDirectors);

        lblDirectorsError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblDirectorsError.setForeground(java.awt.Color.red);
        lblDirectorsError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lsAllDirectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lsAllDirectorsMouseEntered(evt);
            }
        });
        jScrollPane6.setViewportView(lsAllDirectors);

        jLabel28.setText("All directors:");

        lblPoster.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));

        btnChoosePicture.setBackground(new java.awt.Color(255, 255, 102));
        btnChoosePicture.setText("Choose picture");
        btnChoosePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChoosePictureActionPerformed(evt);
            }
        });

        jLabel30.setText("Genres:");

        lblGenresError.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        lblGenresError.setForeground(java.awt.Color.red);
        lblGenresError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jScrollPane7.setViewportView(lsGenres);

        btnUpdate.setBackground(new java.awt.Color(51, 153, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(102, 255, 102));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel6.setText("Published date (03.12.2011. 15:12:11):");

        tfPubDate.setName("PubDate"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfPoster))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfStartDate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfDuration))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfLink))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfGuid))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfTrailer))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfPubDate)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPosterError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPubDateError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblStartDateError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDurationError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLinkError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGuidError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTrailerError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDescriptionError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfOriginalTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfTitle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGenresError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnChoosePicture, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPoster, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(lblDirectorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(lblActorsError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfPoster, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblPosterError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblActorsError))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPubDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfPubDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblStartDateError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfGuid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGuidError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tfTrailer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTrailerError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jScrollPane3)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnChoosePicture)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGenresError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblDirectorsError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane5))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                String localPicturePath = uploadPicture();

                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        LocalDateTime.parse(tfPubDate.getText().trim(), Movie.PUB_DATE_FORMATTER),
                        taDescription.getText().trim(),
                        tfOriginalTitle.getText().trim(),
                        directors,
                        actors,
                        Optional.of(Integer.parseInt(tfDuration.getText().trim())),
                        new TreeSet(lsGenres.getSelectedValuesList()),
                        localPicturePath,
                        tfLink.getText().trim(),
                        tfGuid.getText().trim(),
                        tfTrailer.getText().trim(),
                        (Date) Movie.START_DATE_FORMATTER.parse(tfStartDate.getText().trim())
                );
                movieRepository.create(movie);
                moviesTableModel.setMovies(movieRepository.selectAll());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to create movie.");
            }
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a movie to update.");
            return;
        }
        if (formValid()) {
            try {
                if (!tfPoster.getText().trim().equals(selectedMovie.getPoster())) {
                    if (selectedMovie.getPoster() != null) {
                        Files.deleteIfExists(Paths.get(selectedMovie.getPoster()));
                    }
                    String localPicturePath = uploadPicture();
                    selectedMovie.setPoster(localPicturePath);
                }

                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setPubDate(LocalDateTime.parse(tfPubDate.getText().trim(), Movie.PUB_DATE_FORMATTER));
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setOriginalTitle(tfOriginalTitle.getText().trim());
                selectedMovie.setDirectors(directors);
                selectedMovie.setActors(actors);
                selectedMovie.setDuration(Optional.of(Integer.parseInt(tfDuration.getText().trim())));
                selectedMovie.setLink(tfLink.getText().trim());
                selectedMovie.setGenres(new TreeSet(lsGenres.getSelectedValuesList()));
                selectedMovie.setLink(tfLink.getText().trim());
                selectedMovie.setGuid(tfGuid.getText().trim());
                selectedMovie.setTrailer(tfTrailer.getText().trim());
                selectedMovie.setStartDate((Date) Movie.START_DATE_FORMATTER.parse(tfStartDate.getText().trim()));

                movieRepository.update(selectedMovie.getId(), selectedMovie);
                moviesTableModel.setMovies(movieRepository.selectAll());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to update movie.");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose a movie to delete.");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete movie?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getPoster() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPoster()));
                }
                movieRepository.delete(selectedMovie.getId());
                moviesTableModel.setMovies(movieRepository.selectAll());

                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie.");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnChoosePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChoosePictureActionPerformed
        Optional<File> file = FileUtils.uploadFile("Images", "jpg", "jpeg", "png");
        if (!file.isPresent()) {
            return;
        }
        tfPoster.setText(file.get().getAbsolutePath());
        setIcon(lblPoster, file.get());
    }//GEN-LAST:event_btnChoosePictureActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void tblMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblMoviesKeyReleased
        showMovie();
    }//GEN-LAST:event_tblMoviesKeyReleased

    private void tblMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMoviesMouseClicked
        showMovie();
    }//GEN-LAST:event_tblMoviesMouseClicked

    private void lsDirectorsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsDirectorsMouseEntered
        // drag drop - directors -> allDirectors
        initDragDrop(directorsModel, directors, lsDirectors, allDirectorsModel, allDirectors, lsAllDirectors);
    }//GEN-LAST:event_lsDirectorsMouseEntered

    private void lsAllDirectorsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAllDirectorsMouseEntered
        // drag drop - all directors -> directors
        initDragDrop(allDirectorsModel, allDirectors, lsAllDirectors, directorsModel, directors, lsDirectors);
    }//GEN-LAST:event_lsAllDirectorsMouseEntered

    private void lsActorsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsActorsMouseEntered
        // drag drop - actors -> allActors
        initDragDrop(actorsModel, actors, lsActors, allActorsModel, allActors, lsAllActors);
    }//GEN-LAST:event_lsActorsMouseEntered

    private void lsAllActorsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAllActorsMouseEntered
        // drag drop - all directors -> directors
        initDragDrop(allActorsModel, allActors, lsAllActors, actorsModel, actors, lsActors);
    }//GEN-LAST:event_lsAllActorsMouseEntered


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoosePicture;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblActorsError;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblDirectorsError;
    private javax.swing.JLabel lblDurationError;
    private javax.swing.JLabel lblGenresError;
    private javax.swing.JLabel lblGuidError;
    private javax.swing.JLabel lblLinkError;
    private javax.swing.JLabel lblOriginalTitleError;
    private javax.swing.JLabel lblPoster;
    private javax.swing.JLabel lblPosterError;
    private javax.swing.JLabel lblPubDateError;
    private javax.swing.JLabel lblStartDateError;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JLabel lblTrailerError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsAllActors;
    private javax.swing.JList<Person> lsAllDirectors;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JList<Genre> lsGenres;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tblMovies;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfGuid;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPoster;
    private javax.swing.JTextField tfPubDate;
    private javax.swing.JTextField tfStartDate;
    private javax.swing.JTextField tfTitle;
    private javax.swing.JTextField tfTrailer;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            initGenres();

            // init all directors
            allDirectors.addAll(RepositoryFactory.getDirectorRepository().selectAll());
            loadPersonsList(allDirectorsModel, allDirectors, lsAllDirectors);

            // init all actors
            allActors.addAll(RepositoryFactory.getActorRepository().selectAll());
            loadPersonsList(allActorsModel, allActors, lsAllActors);
            
            clearForm();
        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form.");
            System.exit(1);
        }
    }

    private void initValidation() {
        validationFields = Arrays.asList(
                tfTitle,
                tfPubDate,
                taDescription,
                tfOriginalTitle,
                lsDirectors,
                lsActors,
                tfDuration,
                lsGenres,
                tfPoster,
                tfLink,
                tfGuid,
                tfTrailer,
                tfStartDate);

        errorLabels = Arrays.asList(
                lblTitleError,
                lblPubDateError,
                lblDescriptionError,
                lblOriginalTitleError,
                lblDirectorsError,
                lblActorsError,
                lblDurationError,
                lblGenresError,
                lblPosterError,
                lblLinkError,
                lblGuidError,
                lblTrailerError,
                lblStartDateError);
    }

    private void initRepository() throws Exception {
        movieRepository = RepositoryFactory.getMovieRepository();
    }

    private void initTable() throws Exception {
        tblMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblMovies.setAutoCreateRowSorter(true);
        tblMovies.setRowHeight(25);
        moviesTableModel = new MovieTableModel(movieRepository.selectAll());
        if (moviesTableModel.getRowCount() == 0) {
            MessageUtils.showInformationMessage("No data", "No movies to show.");
        }
        tblMovies.setModel(moviesTableModel);
    }

    private void initGenres() {
        DefaultListModel<Genre> genreModel = new DefaultListModel<>();

        for (Genre genre : Genre.values()) {
            genreModel.addElement(genre);
        }
        lsGenres.setModel(genreModel);
    }

    public void showMovie() {
        clearForm();
        int selectedRow = tblMovies.getSelectedRow();
        int rowIndex = tblMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) moviesTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optMovie = movieRepository.select(selectedMovieId);
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to show movie.");
        }
    }

    private void clearForm() {
        try {
            validationFields.forEach(vf -> {
                if (vf instanceof JTextComponent) {
                    ((JTextComponent) vf).setText("");
                } else if (vf instanceof JList) {
                    ((JList) vf).setSelectedIndex(0);
                }
            });
            errorLabels.forEach(el -> el.setText(""));
            lblPoster.setIcon(null);
            selectedMovie = null;

            actors.clear();
            loadPersonsList(actorsModel, actors, lsActors);

            directors.clear();
            loadPersonsList(directorsModel, directors, lsDirectors);

            allDirectors.clear();
            allDirectors.addAll(RepositoryFactory.getDirectorRepository().selectAll());
            loadPersonsList(allDirectorsModel, allDirectors, lsAllDirectors);

            allActors.clear();
            allActors.addAll(RepositoryFactory.getActorRepository().selectAll());
            loadPersonsList(allActorsModel, allActors, lsAllActors);
        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillForm(Movie movie) {
        try {
            if (movie.getPoster() != null && Files.exists(Paths.get(movie.getPoster()))) {
                try {
                    setIcon(lblPoster, new File(movie.getPoster()));
                    tfPoster.setText(movie.getPoster());
                } catch (Exception ex) {
                    Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                    MessageUtils.showErrorMessage("Error", "Unable to set poster.");
                }
            }

            tfTitle.setText(movie.getTitle());
            tfPubDate.setText(movie.getPubDate().format(Movie.PUB_DATE_FORMATTER));
            taDescription.setText(movie.getDescription());
            tfOriginalTitle.setText(movie.getOriginalTitle());

            // allDirectors
            allDirectors.clear();
            allDirectors.addAll(RepositoryFactory.getDirectorRepository().selectAll());
            movie.getDirectors().forEach((director) -> {
                allDirectors.remove(director);
            });
            loadPersonsList(allDirectorsModel, allDirectors, lsAllDirectors);

            // directors
            directors.clear();
            directors.addAll(movie.getDirectors());
            loadPersonsList(directorsModel, directors, lsDirectors);

            // allActors
            allActors.clear();
            allActors.addAll(RepositoryFactory.getActorRepository().selectAll());
            movie.getActors().forEach((actor) -> {
                allActors.remove(actor);
            });
            loadPersonsList(allActorsModel, allActors, lsAllActors);

            // actors
            actors.clear();
            actors.addAll(movie.getActors());
            loadPersonsList(actorsModel, actors, lsActors);

            // duration
            if (movie.getDuration().isPresent()) {
                tfDuration.setText(movie.getDuration().get().toString());
            } else {
                tfDuration.setText("");
            }
            // genres
            selectGenres(movie.getGenres());
            tfLink.setText(movie.getLink());
            tfGuid.setText(movie.getGuid());
            tfTrailer.setText(movie.getTrailer());
            tfStartDate.setText(Movie.START_DATE_FORMATTER.format(movie.getStartDate()));
        } catch (Exception ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(), label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set icon.");
        }
    }

    private void selectGenres(Set<Genre> genres) {
        int[] indices = new int[genres.size()];
        int genreIndex = 0;
        int arrayPosition = 0;
        for (Genre genre1 : Genre.values()) {
            for (Genre genre2 : genres) {
                if (genre1.equals(genre2)) {
                    indices[arrayPosition] = genreIndex;
                    arrayPosition++;
                }
            }
            genreIndex++;
        }
        lsGenres.setSelectedIndices(indices);
    }

    private String uploadPicture() throws IOException {
        String posterPath = tfPoster.getText().trim();
        String ext = posterPath.substring(posterPath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(posterPath, localPicturePath);
        return localPicturePath;
    }

    private boolean formValid() {
        boolean ok = true;

        for (int i = 0; i < validationFields.size(); i++) {

            if (validationFields.get(i) instanceof JTextComponent) {

                JTextComponent vf = (JTextComponent) validationFields.get(i);

                ok &= !vf.getText().trim().isEmpty();
                errorLabels.get(i).setText(vf.getText().trim().isEmpty() ? "X" : "");

                if ("PubDate".equals(vf.getName())) {
                    try {
                        LocalDateTime.parse(tfPubDate.getText().trim(), Movie.PUB_DATE_FORMATTER);
                        errorLabels.get(i).setText("");
                    } catch (Exception e) {
                        ok = false;
                        errorLabels.get(i).setText("X");
                    }
                }

                if ("StartDate".equals(vf.getName())) {
                    try {
                        Date name = (Date) Movie.START_DATE_FORMATTER.parse(vf.getText().trim());
                        errorLabels.get(i).setText("");
                    } catch (ParseException e) {
                        ok = false;
                        errorLabels.get(i).setText("X");
                    }
                }

                if ("Duration".equals(vf.getName())) {
                    try {
                        Integer.parseInt(vf.getText().trim());
                        errorLabels.get(i).setText("");
                    } catch (NumberFormatException e) {
                        ok = false;
                        errorLabels.get(i).setText("X");
                    }
                }
            } else if (validationFields.get(i) instanceof JList) {
                JList vf = (JList) validationFields.get(i);

                if (vf == lsGenres) {
                    if (vf.isSelectionEmpty()) {
                        ok = false;
                        errorLabels.get(i).setText("X");
                    } else {
                        errorLabels.get(i).setText("");
                    }
                } else {
                    try {
                        vf.getModel().getElementAt(0);
                        errorLabels.get(i).setText("");
                    } catch (Exception ex) {
                        ok = false;
                        errorLabels.get(i).setText("X");
                    }
                }
            }
        }

        return ok;
    }

    private void initDragDrop(DefaultListModel<Person> sourcePersonsModel, Set<Person> sourcePersons, JList<Person> lsSourcePersons, DefaultListModel<Person> destPeronsModel, Set<Person> destPersons, JList<Person> lsDestPersons) {
        lsSourcePersons.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsSourcePersons.setDragEnabled(true);
        lsSourcePersons.setTransferHandler(new ExportHandler(lsSourcePersons));

        lsDestPersons.setDropMode(DropMode.ON);
        lsDestPersons.setTransferHandler(new ImportHandler(sourcePersonsModel, sourcePersons, lsSourcePersons, destPeronsModel, destPersons, lsDestPersons));
    }

    private class ExportHandler extends TransferHandler {

        private final JList<Person> lsPersons;

        public ExportHandler(JList<Person> lsPersons) {
            this.lsPersons = lsPersons;
        }

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsPersons.getSelectedValue());
        }
    }

    private class ImportHandler extends TransferHandler {

        private final DefaultListModel<Person> destPersonsModel;
        private final DefaultListModel<Person> sourcePersonsModel;
        private final Set<Person> destPersons;
        private final Set<Person> sourcePersons;
        private final JList<Person> lsDestPersons;
        private final JList<Person> lsSourcePersons;

        public ImportHandler(DefaultListModel<Person> sourcePersonsModel, Set<Person> sourcePersons, JList<Person> lsSourcePersons, DefaultListModel<Person> destPersonsModel, Set<Person> destPersons, JList<Person> lsDestPersons) {
            this.destPersonsModel = destPersonsModel;
            this.destPersons = destPersons;
            this.lsDestPersons = lsDestPersons;
            this.sourcePersonsModel = sourcePersonsModel;
            this.sourcePersons = sourcePersons;
            this.lsSourcePersons = lsSourcePersons;
        }

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person data = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);

                if (destPersons.add(data)) {

                    for (int i = 0; i < destPersonsModel.size(); i++) {
                        destPersons.add(destPersonsModel.get(i));
                    }
                    loadPersonsList(destPersonsModel, destPersons, lsDestPersons);

                    sourcePersons.remove(lsSourcePersons.getSelectedValue());
                    loadPersonsList(sourcePersonsModel, sourcePersons, lsSourcePersons);

                    return true;
                }
            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(MoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }
    }

    private void loadPersonsList(DefaultListModel<Person> personsModel, Collection<Person> persons, JList<Person> lsPersons) {
        personsModel.clear();
        persons.forEach(personsModel::addElement);
        lsPersons.removeAll();
        lsPersons.setModel(personsModel);
    }
}
